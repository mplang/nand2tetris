// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // i xx a cccccc ddd jjj
    Not(in=instruction[15], out=aInstr);  // c-instruction if the i-bit is set, otherwise a-instruction
    And(a=instruction[15], b=instruction[3], out=writeM);   // if c-instruction and the third d-bit is set

    // D Register
    And(a=instruction[15], b=instruction[4], out=storeInD); // if c-instruction and the second d-bit is set
    DRegister(in=aluOut, load=storeInD, out=dOut);

    // A Register
    Mux16(a=aluOut, b=instruction, sel=aInstr, out=aOrI);
    And(a=instruction[15], b=instruction[5], out=storeInA); // if c-instruction and the first d-bit is set
    Or(a=aInstr, b=storeInA, out=loadA);    // if an a-instruction or storeInA
    ARegister(in=aOrI, load=loadA, out=aOut, out[0..14]=addressM);

    // ALU
    Mux16(a=aOut, b=inM, sel=instruction[12], out=aOrM);
    ALU(x=dOut, y=aOrM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=zr, ng=ng);

    // Jump logic
    // 210
    // 000  null 
    // 001  jgt
    // 010  jeq
    // 011  jge
    // 100  jlt
    // 101  jne
    // 110  jle
    // 111  jmp
    //
    Not(in=zr, out=nzr);    // not zero
    Not(in=ng, out=nng);    // not negative
    And(a=nzr, b=nng, out=pos); // positive
    And(a=instruction[0], b=pos, out=jmpPos); // > 0
    And(a=instruction[1], b=zr, out=jmpZr); // == 0
    And(a=instruction[2], b=ng, out=jmpNg); // < 0
    Or(a=jmpPos, b=jmpZr, out=jmpPosOrZr);
    Or(a=jmpPosOrZr, b=jmpNg, out=canJmp);
    And(a=instruction[15], b=canJmp, out=doJmp);    // if canJmp && C-instruction

    // Program Counter
    Not(in=doJmp, out=doInc);
    PC(in=aOut, reset=reset, load=doJmp, inc=doInc, out[0..14]=pc);
}
